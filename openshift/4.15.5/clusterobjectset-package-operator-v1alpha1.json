{
  "description": "ClusterObjectSet reconciles a collection of objects through ordered phases and aggregates their status. \n ClusterObjectSets behave similarly to Kubernetes ReplicaSets, by managing a collection of objects and being itself mostly immutable. This object type is able to suspend/pause reconciliation of specific objects to facilitate the transition between revisions. \n Archived ClusterObjectSets may stay on the cluster, to store information about previous revisions. \n A Namespace-scoped version of this API is available as ObjectSet.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "package-operator.run/v1alpha1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "ClusterObjectSet"
      ]
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
    },
    "spec": {
      "description": "ClusterObjectSetSpec defines the desired state of a ClusterObjectSet.",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "availabilityProbes": {
          "description": "Availability Probes check objects that are part of the package. All probes need to succeed for a package to be considered Available. Failing probes will prevent the reconciliation of objects in later phases.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "ObjectSetProbe define how ObjectSets check their children for their status.",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "probes",
              "selector"
            ],
            "properties": {
              "probes": {
                "description": "Probe configuration parameters.",
                "type": "array",
                "items": {
                  "description": "Defines probe parameters. Only one can be filled.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "cel": {
                      "description": "Uses Common Expression Language (CEL) to probe an object. CEL rules have to evaluate to a boolean to be valid. See: https://kubernetes.io/docs/reference/using-api/cel https://github.com/google/cel-go",
                      "type": [
                        "object",
                        "null"
                      ],
                      "required": [
                        "message",
                        "rule"
                      ],
                      "properties": {
                        "message": {
                          "description": "Error message to output if rule evaluates to false.",
                          "type": "string"
                        },
                        "rule": {
                          "description": "CEL rule to evaluate.",
                          "type": "string"
                        }
                      }
                    },
                    "condition": {
                      "description": "Checks whether or not the object reports a condition with given type and status.",
                      "type": [
                        "object",
                        "null"
                      ],
                      "required": [
                        "status",
                        "type"
                      ],
                      "properties": {
                        "status": {
                          "description": "Condition status to probe for.",
                          "type": "string"
                        },
                        "type": {
                          "description": "Condition type to probe for.",
                          "type": "string"
                        }
                      }
                    },
                    "fieldsEqual": {
                      "description": "Compares two fields specified by JSON Paths.",
                      "type": [
                        "object",
                        "null"
                      ],
                      "required": [
                        "fieldA",
                        "fieldB"
                      ],
                      "properties": {
                        "fieldA": {
                          "description": "First field for comparison.",
                          "type": "string"
                        },
                        "fieldB": {
                          "description": "Second field for comparison.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "selector": {
                "description": "Selector specifies which objects this probe should target.",
                "type": "object",
                "required": [
                  "kind"
                ],
                "properties": {
                  "kind": {
                    "description": "Kind and API Group of the object to probe.",
                    "type": "object",
                    "required": [
                      "group",
                      "kind"
                    ],
                    "properties": {
                      "group": {
                        "description": "Object Group to apply a probe to.",
                        "type": "string"
                      },
                      "kind": {
                        "description": "Object Kind to apply a probe to.",
                        "type": "string"
                      }
                    }
                  },
                  "selector": {
                    "description": "Further sub-selects objects based on a Label Selector.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "properties": {
                      "matchExpressions": {
                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                        "type": [
                          "array",
                          "null"
                        ],
                        "items": {
                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                          "type": [
                            "object",
                            "null"
                          ],
                          "required": [
                            "key",
                            "operator"
                          ],
                          "properties": {
                            "key": {
                              "description": "key is the label key that the selector applies to.",
                              "type": "string"
                            },
                            "operator": {
                              "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                              "type": "string"
                            },
                            "values": {
                              "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                              "type": [
                                "array",
                                "null"
                              ],
                              "items": {
                                "type": [
                                  "string",
                                  "null"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "matchLabels": {
                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                        "type": [
                          "object",
                          "null"
                        ],
                        "additionalProperties": {
                          "type": [
                            "string",
                            "null"
                          ]
                        }
                      }
                    },
                    "x-kubernetes-map-type": "atomic"
                  }
                }
              }
            }
          }
        },
        "lifecycleState": {
          "description": "Specifies the lifecycle state of the ClusterObjectSet.",
          "type": [
            "string",
            "null"
          ],
          "enum": [
            "Active",
            "Paused",
            "Archived"
          ]
        },
        "phases": {
          "description": "Reconcile phase configuration for a ObjectSet. Phases will be reconciled in order and the contained objects checked against given probes before continuing with the next phase.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "ObjectSet reconcile phase.",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "name"
            ],
            "properties": {
              "class": {
                "description": "If non empty, the ObjectSet controller will delegate phase reconciliation to another controller, by creating an ObjectSetPhase object. If set to the string \"default\" the built-in Package Operator ObjectSetPhase controller will reconcile the object in the same way the ObjectSet would. If set to any other string, an out-of-tree controller needs to be present to handle ObjectSetPhase objects.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "externalObjects": {
                "description": "ExternalObjects observed, but not reconciled by this phase.",
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "description": "An object that is part of the phase of an ObjectSet.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "required": [
                    "object"
                  ],
                  "properties": {
                    "conditionMappings": {
                      "description": "Maps conditions from this object into the Package Operator APIs.",
                      "type": [
                        "array",
                        "null"
                      ],
                      "items": {
                        "type": [
                          "object",
                          "null"
                        ],
                        "required": [
                          "destinationType",
                          "sourceType"
                        ],
                        "properties": {
                          "destinationType": {
                            "description": "Destination condition type to report into Package Operator APIs.",
                            "type": "string",
                            "pattern": "[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*\\/([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]"
                          },
                          "sourceType": {
                            "description": "Source condition type.",
                            "type": "string"
                          }
                        }
                      }
                    },
                    "object": {
                      "x-kubernetes-embedded-resource": true,
                      "x-kubernetes-preserve-unknown-fields": true
                    }
                  }
                }
              },
              "name": {
                "description": "Name of the reconcile phase. Must be unique within a ObjectSet.",
                "type": "string"
              },
              "objects": {
                "description": "Objects belonging to this phase.",
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "description": "An object that is part of the phase of an ObjectSet.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "required": [
                    "object"
                  ],
                  "properties": {
                    "conditionMappings": {
                      "description": "Maps conditions from this object into the Package Operator APIs.",
                      "type": [
                        "array",
                        "null"
                      ],
                      "items": {
                        "type": [
                          "object",
                          "null"
                        ],
                        "required": [
                          "destinationType",
                          "sourceType"
                        ],
                        "properties": {
                          "destinationType": {
                            "description": "Destination condition type to report into Package Operator APIs.",
                            "type": "string",
                            "pattern": "[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*\\/([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]"
                          },
                          "sourceType": {
                            "description": "Source condition type.",
                            "type": "string"
                          }
                        }
                      }
                    },
                    "object": {
                      "x-kubernetes-embedded-resource": true,
                      "x-kubernetes-preserve-unknown-fields": true
                    }
                  }
                }
              },
              "slices": {
                "description": "References to ObjectSlices containing objects for this phase.",
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              }
            }
          }
        },
        "previous": {
          "description": "Previous revisions of the ClusterObjectSet to adopt objects from.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "References a previous revision of an ObjectSet or ClusterObjectSet.",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "description": "Name of a previous revision.",
                "type": "string"
              }
            }
          }
        },
        "successDelaySeconds": {
          "description": "Success Delay Seconds applies a wait period from the time an Object Set is available to the time it is marked as successful. This can be used to prevent false reporting of success when the underlying objects may initially satisfy the availability probes, but are ultimately unstable.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int32"
        }
      }
    },
    "status": {
      "description": "ClusterObjectSetStatus defines the observed state of a ClusterObjectSet.",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "conditions": {
          "description": "Conditions is a list of status conditions ths object is in.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            }
          }
        },
        "controllerOf": {
          "description": "References all objects controlled by this instance.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "References an object controlled by this ObjectSet/ObjectSetPhase.",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "group",
              "kind",
              "name"
            ],
            "properties": {
              "group": {
                "description": "Object Group.",
                "type": "string"
              },
              "kind": {
                "description": "Object Kind.",
                "type": "string"
              },
              "name": {
                "description": "Object Name.",
                "type": "string"
              },
              "namespace": {
                "description": "Object Namespace.",
                "type": [
                  "string",
                  "null"
                ]
              }
            }
          }
        },
        "phase": {
          "description": "Phase is not part of any API contract it will go away as soon as kubectl can print conditions! When evaluating object state in code, use .Conditions instead.",
          "type": [
            "string",
            "null"
          ]
        },
        "remotePhases": {
          "description": "Remote phases aka ClusterObjectSetPhase objects.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "References remote phases aka ObjectSetPhase/ClusterObjectSetPhase objects to which a phase is delegated.",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "name",
              "uid"
            ],
            "properties": {
              "name": {
                "type": "string"
              },
              "uid": {
                "description": "UID is a type that holds unique ID values, including UUIDs.  Because we don't ONLY use UUIDs, this is an alias to string.  Being a type captures intent and helps make sure that UIDs and names do not get conflated.",
                "type": "string"
              }
            }
          }
        },
        "revision": {
          "description": "Computed revision number, monotonically increasing.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int64"
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "package-operator.run",
      "kind": "ClusterObjectSet",
      "version": "v1alpha1"
    }
  ],
  "$schema": "http://json-schema.org/schema#"
}